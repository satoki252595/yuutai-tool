#!/usr/bin/env node

import sqlite3 from 'sqlite3';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üß™ „Éá„Éº„Çø„Éô„Éº„Çπ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„ÉàÈñãÂßã...\n');

const db = new sqlite3.Database(join(__dirname, 'db/yuutai.db'));

// È´òÁ≤æÂ∫¶„Çø„Ç§„Éû„Éº
function measureTime(description, fn) {
  return new Promise((resolve, reject) => {
    const start = process.hrtime.bigint();
    fn((err, result) => {
      const end = process.hrtime.bigint();
      const durationNs = Number(end - start);
      const durationMs = durationNs / 1000000;
      
      if (err) {
        reject(err);
      } else {
        console.log(`${description}: ${result}‰ª∂ (${durationMs.toFixed(3)}ms)`);
        resolve({ result, duration: durationMs });
      }
    });
  });
}

async function runPerformanceTests() {
  try {
    console.log('=== Âü∫Êú¨„ÇØ„Ç®„É™ ===');
    
    // „ÉÜ„Çπ„Éà1: ÈäòÊüÑÊï∞„Ç´„Ç¶„É≥„Éà
    await measureTime('  ÂÖ®ÈäòÊüÑÊï∞ÂèñÂæó', (callback) => {
      db.get('SELECT COUNT(*) as count FROM stocks', (err, row) => {
        callback(err, row?.count);
      });
    });
    
    // „ÉÜ„Çπ„Éà2: ÂÑ™ÂæÖÊÉÖÂ†±Êï∞„Ç´„Ç¶„É≥„Éà
    await measureTime('  ÂÑ™ÂæÖÊÉÖÂ†±Êï∞ÂèñÂæó', (callback) => {
      db.get('SELECT COUNT(*) as count FROM shareholder_benefits', (err, row) => {
        callback(err, row?.count);
      });
    });
    
    // „ÉÜ„Çπ„Éà3: ‰æ°Ê†ºÂ±•Ê≠¥Êï∞„Ç´„Ç¶„É≥„Éà
    await measureTime('  ‰æ°Ê†ºÂ±•Ê≠¥Êï∞ÂèñÂæó', (callback) => {
      db.get('SELECT COUNT(*) as count FROM price_history', (err, row) => {
        callback(err, row?.count);
      });
    });
    
    console.log('\n=== Ê§úÁ¥¢„ÇØ„Ç®„É™ÔºàÊúÄÈÅ©ÂåñÂâç„ÅÆË§áÈõë„Å™ÁµêÂêàÔºâ ===');
    
    // „ÉÜ„Çπ„Éà4: Ë§áÈõë„Å™ÁµêÂêà„ÇØ„Ç®„É™ÔºàÊúÄÈÅ©ÂåñÂâçÔºâ
    await measureTime('  Ë§áÈõëÁµêÂêà„ÇØ„Ç®„É™ÔºàÊúÄÈÅ©ÂåñÂâçÔºâ', (callback) => {
      const sql = `
        SELECT 
          s.code,
          s.name,
          s.japanese_name,
          ph.price,
          ph.dividend_yield,
          COUNT(DISTINCT sb.id) as benefit_count,
          SUM(sb.monetary_value) as total_benefit_value
        FROM stocks s
        LEFT JOIN shareholder_benefits sb ON s.code = sb.stock_code
        LEFT JOIN (
          SELECT stock_code, price, dividend_yield, annual_dividend, data_source
          FROM price_history
          WHERE (stock_code, recorded_at) IN (
            SELECT stock_code, MAX(recorded_at)
            FROM price_history
            GROUP BY stock_code
          )
        ) ph ON s.code = ph.stock_code
        GROUP BY s.code
        LIMIT 100
      `;
      db.all(sql, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    console.log('\n=== Ê§úÁ¥¢„ÇØ„Ç®„É™ÔºàÊúÄÊñ∞‰æ°Ê†º„ÉÜ„Éº„Éñ„É´‰ΩøÁî®Ôºâ ===');
    
    // „ÉÜ„Çπ„Éà5: ÊúÄÊñ∞‰æ°Ê†º„ÉÜ„Éº„Éñ„É´„Çí‰Ωø„Å£„ÅüÊúÄÈÅ©Âåñ„ÇØ„Ç®„É™
    await measureTime('  ÊúÄÈÅ©ÂåñÊ∏à„ÅøÁµêÂêà„ÇØ„Ç®„É™', (callback) => {
      const sql = `
        SELECT 
          s.code,
          s.name,
          s.japanese_name,
          lp.price,
          lp.dividend_yield,
          COUNT(DISTINCT sb.id) as benefit_count,
          SUM(sb.monetary_value) as total_benefit_value
        FROM stocks s
        LEFT JOIN shareholder_benefits sb ON s.code = sb.stock_code
        LEFT JOIN latest_prices lp ON s.code = lp.stock_code
        GROUP BY s.code
        LIMIT 100
      `;
      db.all(sql, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    console.log('\n=== ÁâπÂÆöÊ§úÁ¥¢„ÇØ„Ç®„É™ ===');
    
    // „ÉÜ„Çπ„Éà6: ÈäòÊüÑÂêçÊ§úÁ¥¢
    await measureTime('  ÈäòÊüÑÂêçÊ§úÁ¥¢', (callback) => {
      db.all(`
        SELECT code, name, japanese_name 
        FROM stocks 
        WHERE name LIKE '%ÈäÄË°å%' OR japanese_name LIKE '%ÈäÄË°å%'
        LIMIT 50
      `, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    // „ÉÜ„Çπ„Éà7: ÂÑ™ÂæÖÁ®ÆÂà•Ê§úÁ¥¢
    await measureTime('  ÂÑ™ÂæÖÁ®ÆÂà•Ê§úÁ¥¢', (callback) => {
      db.all(`
        SELECT DISTINCT stock_code, benefit_type, monetary_value
        FROM shareholder_benefits 
        WHERE benefit_type LIKE '%È£ü‰∫ã%'
        LIMIT 50
      `, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    // „ÉÜ„Çπ„Éà8: RSIÊ§úÁ¥¢
    await measureTime('  RSIÊ§úÁ¥¢', (callback) => {
      db.all(`
        SELECT code, name, rsi, rsi28
        FROM stocks 
        WHERE rsi IS NOT NULL AND rsi < 30
        LIMIT 50
      `, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    console.log('\n=== „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂäπÊûú„ÉÜ„Çπ„Éà ===');
    
    // „ÉÜ„Çπ„Éà9: Ê®©Âà©Êúà„Åß„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    await measureTime('  Ê®©Âà©Êúà„Éï„Ç£„É´„Çø', (callback) => {
      db.all(`
        SELECT s.code, s.name, sb.ex_rights_month, sb.monetary_value
        FROM stocks s
        JOIN shareholder_benefits sb ON s.code = sb.stock_code
        WHERE sb.ex_rights_month IN (3, 9)
        ORDER BY sb.monetary_value DESC
        LIMIT 100
      `, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    // „ÉÜ„Çπ„Éà10: ÊúÄÂ∞èÊ†™Êï∞„Åß„ÅÆ‰∏¶„Å≥Êõø„Åà
    await measureTime('  ÊúÄÂ∞èÊ†™Êï∞„ÇΩ„Éº„Éà', (callback) => {
      db.all(`
        SELECT s.code, s.name, sb.min_shares, sb.monetary_value
        FROM stocks s
        JOIN shareholder_benefits sb ON s.code = sb.stock_code
        WHERE sb.min_shares <= 1000
        ORDER BY sb.min_shares ASC
        LIMIT 100
      `, (err, rows) => {
        callback(err, rows?.length);
      });
    });
    
    console.log('\n=== „Éá„Éº„Çø„Éô„Éº„ÇπÁµ±Ë®à ===');
    
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Ç§„Ç∫
    const stats = fs.statSync(join(__dirname, 'db/yuutai.db'));
    const sizeMB = (stats.size / 1024 / 1024).toFixed(2);
    console.log(`  „Éá„Éº„Çø„Éô„Éº„Çπ„Çµ„Ç§„Ç∫: ${sizeMB} MB`);
    
    // „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊï∞Á¢∫Ë™ç
    await measureTime('  „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊï∞Á¢∫Ë™ç', (callback) => {
      db.all(`
        SELECT name, sql 
        FROM sqlite_master 
        WHERE type = 'index' AND name NOT LIKE 'sqlite_%'
      `, (err, rows) => {
        if (!err && rows) {
          console.log('\n  ‰ΩúÊàêÊ∏à„Åø„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ:');
          rows.forEach(row => {
            console.log(`    - ${row.name}`);
          });
        }
        callback(err, rows?.length);
      });
    });
    
    console.log('\n‚úÖ „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
    
  } catch (error) {
    console.error('‚ùå „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error);
  } finally {
    db.close();
  }
}

runPerformanceTests();